{"ast":null,"code":"var _jsxFileName = \"/Users/charlymac/My Projects/Learning React/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 7\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      })), \" \", this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (error && touched) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 9\n        }\n      }, error));\n    }\n  }\n\n  onSubmit(formValues) {\n    this.props.createStream(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/charlymac/My Projects/Learning React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAUzCC,WAVyC,GAU3B,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACtC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GACvB,OADuB,GAEvB,EAAG,EAFP;AAGA,0BAAQ;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADM,eAEN,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFM,OAEkC,KAAKM,WAAL,CAAiBJ,IAAjB,CAFlC,CAAR;AAID,KAlBwC;AAAA;;AAEzCI,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmB;AAC5B,QAAID,KAAK,IAAIC,OAAb,EAAsB;AACpB,0BAAQ;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACN;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBD,KAAzB,CADM,CAAR;AAGD;AACF;;AAYDG,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnB,SAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBAAQ;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,eAEN,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,eAGN;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHM,CAAR;AAKD;;AA9BwC;;AA+B1C;;AAED,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC/B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,MAAMG,WAAW,GAAGtB,SAAS,CAAC;AAACuB,EAAAA,IAAI,EAAE,cAAP;AAAuBL,EAAAA;AAAvB,CAAD,CAAT,CAA4Cf,YAA5C,CAApB;AAEA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAACC,EAAAA;AAAD,CAAP,CAAP,CAA8BoB,WAA9B,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {connect} from 'react-redux';\nimport {createStream} from '../../actions';\n\nclass StreamCreate extends React.Component {\n\n  renderError({error, touched}) {\n    if (error && touched) {\n      return (<div className=\"ui error message\">\n        <div className=\"header\">{error}</div>\n      </div>);\n    }\n  }\n\n  renderInput = ({input, label, meta}) => {\n    const className = `field ${meta.error && meta.touched\n      ? 'error'\n      : ''}`;\n    return (<div className={className}>\n      <label>{label}</label>\n      <input {...input} autoComplete=\"off\"/> {this.renderError(meta)}\n    </div>);\n  }\n\n  onSubmit(formValues) {\n    this.props.createStream(formValues);\n  }\n\n  render() {\n    return (<form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n      <Field name=\"title\" component={this.renderInput} label=\"Enter title\"/>\n      <Field name=\"description\" component={this.renderInput} label=\"Enter description\"/>\n      <button className=\"ui button primary\">Submit</button>\n    </form>);\n  }\n};\n\nconst validate = (formValues) => {\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n  return errors;\n}\n\nconst formWrapped = reduxForm({form: 'streamCreate', validate})(StreamCreate);\n\nexport default connect(null, {createStream})(formWrapped);\n"]},"metadata":{},"sourceType":"module"}