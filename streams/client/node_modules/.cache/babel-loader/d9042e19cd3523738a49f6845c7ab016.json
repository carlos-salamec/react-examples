{"ast":null,"code":"var _jsxFileName = \"/Users/charlymac/My Projects/Learning React/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id); // FLV CONFIG\n\n    flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}`\n    });\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, title), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, description));\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/charlymac/My Projects/Learning React/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","flv","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","createPlayer","type","url","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,SAAQC,WAAR,QAA0B,eAA1B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAA9B;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB,EAFkB,CAIlB;;AACAT,IAAAA,GAAG,CAACY,YAAJ,CAAiB;AAACC,MAAAA,IAAI,EAAE,KAAP;AAAcC,MAAAA,GAAG,EAAG,8BAA6BL,EAAG;AAApD,KAAjB;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKV,KAAL,CAAWW,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKb,KAAL,CAAWW,MAAxC;AACA,wBAAQ;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN;AAAO,MAAA,GAAG,EAAE,KAAKV,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAC9Ba,QAAAA,KAAK,EAAE;AADuB,OAAlC;AAEK,MAAA,QAAQ,EAAE,IAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,eAIN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAJM,eAKN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,WAAJ,CALM,CAAR;AAOD;;AA3BsC;;AA4BxC;;AAED,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AADH,GAAP;AAGD,CAJD;;AAMA,eAAeV,OAAO,CAACqB,eAAD,EAAkB;AAACnB,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport flv from 'flv.js';\n\nimport {fetchStream} from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {id} = this.props.match.params\n    this.props.fetchStream(id);\n\n    // FLV CONFIG\n    flv.createPlayer({type: 'flv', url: `http://localhost:8000/live/${id}`})\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n\n    const {title, description} = this.props.stream;\n    return (<div className=\"ui container\">\n      <video ref={this.videoRef} style={{\n          width: '100%'\n        }} controls={true}/>\n      <h1>{title}</h1>\n      <p>{description}</p>\n    </div>);\n  }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  }\n}\n\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);\n"]},"metadata":{},"sourceType":"module"}