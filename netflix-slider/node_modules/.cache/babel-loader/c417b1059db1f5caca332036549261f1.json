{"ast":null,"code":"import _slicedToArray from \"/Users/charlymac/My Projects/netflix-slider/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// HOOK libraries\nimport { useState, useRef, useEffect } from 'react'; // next and prev buttons widths (55 each)\n\nvar PADDINGS = 110; // Hook function receives the width of the current element and the number of\n// the Slider component's children\n\nvar useSliding = function useSliding(elementWidth, countElements) {\n  // current slider\n  var containerRef = useRef(null); // Slider width\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      containerWidth = _useState2[0],\n      setContainerWidth = _useState2[1]; // distance between the first element and the beggining of the slider\n\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      distance = _useState4[0],\n      setDistance = _useState4[1]; // Number of elements shown in the slider at the same time\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      totalInViewport = _useState6[0],\n      setTotalInViewport = _useState6[1]; // Number of elements on the left of the prev button\n\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      viewed = _useState8[0],\n      setViewed = _useState8[1];\n\n  useEffect(function () {\n    // set container width\n    setContainerWidth(containerRef.current.clientWidth - PADDINGS); // set the number of elements that can be shown in the slider at the same time\n    // depending on the copntainer width and the elements width\n    //NOT WORKING --> elementWidth = containerRef.current.clientWidth\n\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n    console.log('containerWidth: ' + containerWidth);\n    console.log('elementWidth: ' + elementWidth);\n    console.log('total in viewport: ' + totalInViewport);\n  }, [containerRef.current]); // when the prev button is pressed\n\n  var handlePrev = function handlePrev() {\n    // viewed elements decrements\n    setViewed(viewed - totalInViewport); // distance increments in the value corresponding to the container width\n\n    setDistance(distance + containerWidth);\n  }; // when the next button is pressed\n\n\n  var handleNext = function handleNext() {\n    // viewed elements increments\n    setViewed(viewed + totalInViewport); // distance decrements in the value corresponding to the container width\n\n    setDistance(distance - containerWidth);\n  };\n\n  var slideProps = {\n    style: {\n      transform: \"translate3d(\".concat(distance, \"px, 0, 0)\")\n    }\n  };\n  var hasPrev = distance < 0;\n  var hasNext = viewed + totalInViewport < countElements;\n  return {\n    handlePrev: handlePrev,\n    handleNext: handleNext,\n    slideProps: slideProps,\n    containerRef: containerRef,\n    hasPrev: hasPrev,\n    hasNext: hasNext\n  };\n};\n\nexport default useSliding;","map":{"version":3,"sources":["/Users/charlymac/My Projects/netflix-slider/src/components/NetflixSlider/useSliding.js"],"names":["useState","useRef","useEffect","PADDINGS","useSliding","elementWidth","countElements","containerRef","containerWidth","setContainerWidth","distance","setDistance","totalInViewport","setTotalInViewport","viewed","setViewed","current","clientWidth","Math","floor","console","log","handlePrev","handleNext","slideProps","style","transform","hasPrev","hasNext"],"mappings":";AAAA;AACA,SAAQA,QAAR,EAAkBC,MAAlB,EAA0BC,SAA1B,QAA0C,OAA1C,C,CAEA;;AACA,IAAMC,QAAQ,GAAG,GAAjB,C,CAEA;AACA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAeC,aAAf,EAAiC;AAClD;AACA,MAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B,CAFkD,CAGlD;;AAHkD,kBAIND,QAAQ,CAAC,CAAD,CAJF;AAAA;AAAA,MAI3CQ,cAJ2C;AAAA,MAI3BC,iBAJ2B,kBAKlD;;;AALkD,mBAMlBT,QAAQ,CAAC,CAAD,CANU;AAAA;AAAA,MAM3CU,QAN2C;AAAA,MAMjCC,WANiC,kBAOlD;;;AAPkD,mBAQJX,QAAQ,CAAC,CAAD,CARJ;AAAA;AAAA,MAQ3CY,eAR2C;AAAA,MAQ1BC,kBAR0B,kBASlD;;;AATkD,mBAUtBb,QAAQ,CAAC,CAAD,CAVc;AAAA;AAAA,MAU3Cc,MAV2C;AAAA,MAUnCC,SAVmC;;AAYlDb,EAAAA,SAAS,CAAC,YAAM;AACd;AACAO,IAAAA,iBAAiB,CAACF,YAAY,CAACS,OAAb,CAAqBC,WAArB,GAAmCd,QAApC,CAAjB,CAFc,CAGd;AACA;AAEA;;AACAU,IAAAA,kBAAkB,CAACK,IAAI,CAACC,KAAL,CAAWX,cAAc,GAAGH,YAA5B,CAAD,CAAlB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBb,cAAjC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBhB,YAA/B;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBT,eAApC;AACD,GAXQ,EAWN,CAACL,YAAY,CAACS,OAAd,CAXM,CAAT,CAZkD,CAyBlD;;AACA,MAAMM,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB;AACAP,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT,CAFuB,CAGvB;;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GALD,CA1BkD,CAiClD;;;AACA,MAAMe,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB;AACAR,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT,CAFuB,CAGvB;;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GALD;;AAOA,MAAMgB,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,wBAAiBhB,QAAjB;AADJ;AADU,GAAnB;AAMA,MAAMiB,OAAO,GAAGjB,QAAQ,GAAG,CAA3B;AACA,MAAMkB,OAAO,GAAId,MAAM,GAAGF,eAAV,GAA6BN,aAA7C;AAEA,SAAO;AACLgB,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,UAAU,EAAVA,UAFK;AAGLC,IAAAA,UAAU,EAAVA,UAHK;AAILjB,IAAAA,YAAY,EAAZA,YAJK;AAKLoB,IAAAA,OAAO,EAAPA,OALK;AAMLC,IAAAA,OAAO,EAAPA;AANK,GAAP;AAQD,CA1DD;;AA4DA,eAAexB,UAAf","sourcesContent":["// HOOK libraries\nimport {useState, useRef, useEffect} from 'react'\n\n// next and prev buttons widths (55 each)\nconst PADDINGS = 110;\n\n// Hook function receives the width of the current element and the number of\n// the Slider component's children\nconst useSliding = (elementWidth, countElements) => {\n  // current slider\n  const containerRef = useRef(null);\n  // Slider width\n  const [containerWidth, setContainerWidth] = useState(0);\n  // distance between the first element and the beggining of the slider\n  const [distance, setDistance] = useState(0);\n  // Number of elements shown in the slider at the same time\n  const [totalInViewport, setTotalInViewport] = useState(0)\n  // Number of elements on the left of the prev button\n  const [viewed, setViewed] = useState(0);\n\n  useEffect(() => {\n    // set container width\n    setContainerWidth(containerRef.current.clientWidth - PADDINGS);\n    // set the number of elements that can be shown in the slider at the same time\n    // depending on the copntainer width and the elements width\n\n    //NOT WORKING --> elementWidth = containerRef.current.clientWidth\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n    console.log('containerWidth: ' + containerWidth);\n    console.log('elementWidth: ' + elementWidth);\n    console.log('total in viewport: ' + totalInViewport);\n  }, [containerRef.current]);\n\n  // when the prev button is pressed\n  const handlePrev = () => {\n    // viewed elements decrements\n    setViewed(viewed - totalInViewport);\n    // distance increments in the value corresponding to the container width\n    setDistance(distance + containerWidth);\n  }\n\n  // when the next button is pressed\n  const handleNext = () => {\n    // viewed elements increments\n    setViewed(viewed + totalInViewport);\n    // distance decrements in the value corresponding to the container width\n    setDistance(distance - containerWidth);\n  }\n\n  const slideProps = {\n    style: {\n      transform: `translate3d(${distance}px, 0, 0)`\n    }\n  };\n\n  const hasPrev = distance < 0;\n  const hasNext = (viewed + totalInViewport) < countElements;\n\n  return {\n    handlePrev,\n    handleNext,\n    slideProps,\n    containerRef,\n    hasPrev,\n    hasNext\n  };\n}\n\nexport default useSliding;\n"]},"metadata":{},"sourceType":"module"}